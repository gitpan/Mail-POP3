# mpopd/Mail::POP3Server configuration
{
  # standalone daemon
  'port' => '6110',
  'max_servers' => 10, # concurrent processes
  'mpopd_pid_file' => '/var/run/mpopd.pid',

  'mpopd_pam_service' => 'mpopx',
  'md5_no_pam' => 0,
  'use_pam' => 0,

  # path to a file containing IP's and networks we trust.
  'trusted_networks' => 'out/mpopd_trusted',

  # The name of the password file for virtual and/or hostname-linked access.
  'userlist' => '.userlist',

  # return true if user is valid
  user_check => sub { 1; },
  # return true if user/password is valid
  password_check => sub { 1; },

  mpopd_spool => 'out/mpopd_spool', # '/var/spool/mpopd_spool',
  host_mail_path => '/var/spool/popmail',

  mailbox_class => 'Mail::POP3::Folder::webscrape',
  # rest of mailbox->new args - M::P3::Server supplies user name & password
  mailbox_args => sub {
    my ($config, $user_name, $fqdn) = @_;
    my $makere = sub { # element, attributename, attributevalue
      "<$_[0]\[^>]+?$_[1]=['\"]?$_[2]\['\"]?[^>]*?>(.*?)</$_[0]>";
    };
    (
      'http://www.jobserve.com/gb/en/Job-Search/',
      [ qw(
	ctl00$main$srch$ctl_qs$txtKey
	ctl00$main$srch$ctl_qs$txtLoc
	selRad
      ) ],
      +{
	selInd => '00',
	'ctl00$main$srch$ctl_qs$txtTitle' => '',
	selAge => '7',
	selJType => '15',
      },
      {
	pageno => '<span[^>]+class="Small\s+onpagehighlight"[^>]*?>(.*?)</span>',
	num_pages => '<a[^>]+href=".*?page=(\d+)" title="Last Page"',
	nextlink => '<a[^>]+href="([^"]*)" title="Next Page"',
	itemurls => '<a href="([^"]+)"[^>]+class="jobListPosition"',
      },
      +{
	title => $makere->(qw(div itemprop title)),
	type => $makere->(qw(span itemprop employmentType)),
	description => $makere->(qw(div itemprop description)),
	location => $makere->(qw(span itemprop addressLocality)),
	industry => $makere->(qw(span itemprop industry)),
	rate => $makere->(qw(span id md_rate)),
	recruiter => $makere->(qw(span itemprop name)),
	recruitertype => $makere->(qw(label id lbl_recruiter)),
	recruiterlink => $makere->(qw(span id md_weblink)),
	contact => $makere->(qw(span id md_contact)),
	telephone => $makere->(qw(span id md_telephone)),
	email => $makere->(qw(span id md_email)),
	reference => $makere->(qw(span id md_ref)),
	posted => $makere->(qw(span id md_posted_date)),
	joblink => $makere->(qw(a id md_permalink)),
      },
      +{
	# sub that returns list of key => value
	# might be more than one pair
	email => sub { $_[1] =~ s#.*mailto:(.*?)\?.*#$1#si; @_; },
	contact => sub { $_[1] =~ s#\s*<a.*##i; @_; },
	recruiterlink => sub { $_[1] =~ s#<.*?>##g; @_; },
	industry => sub { $_[1] =~ s#<.*?>##g; @_; },
      },
      sub { ($_[0] =~ m#([^-]+)/$#)[0] . '@jobserve.com'; },
      sub {
	use POSIX qw(strftime);
	use Email::MIME;
	use HTML::FormatText;
	my ($j, $message_id) = @_;
	my ($mday, $mon, $year, $hour, $min, $sec) = split /[\/\s:]/, $j->{posted};
	my $date = strftime "%a, %d %b %Y %H:%M:%S GMT (GMT)", 
	  $sec, $min, $hour, $mday, $mon - 1, $year - 1900;
	my $html_body = <<EOF;
<h1>$j->{type}: $j->{title}</h1>

<p>
$j->{description}
</p>

<p>
Location: $j->{location}<br>
Salary/Rate: $j->{rate}<br>
$j->{recruitertype}: $j->{recruiter}<br>
@{[ 
$j->{recruiterlink} && "Recruiter website: <a href=\"$j->{recruiterlink}\">$j->{recruiterlink}</a><br>"
]}Contact: $j->{contact}<br>
Telephone: $j->{telephone}<br>
E-Mail: $j->{email}<br>
Reference: $j->{reference}<br>
Posted Date: $j->{posted}<br>
Job listing: <a href="$j->{joblink}">$j->{joblink}</a><br>
</p>
EOF
	my $subject = "$j->{title} - Jobserve ref $j->{reference}";
	$subject =~ s#[\x80-\xFF]##g; # remove 8-bit chars from Subject - KISS
	my $text_body = HTML::FormatText->format_string(
	  $html_body,
	  leftmargin => 0, rightmargin => 50
	);
	my @attr = (charset => 'utf-8', encoding => 'quoted-printable');
	my $e = Email::MIME->create(
	  header => [
	    To => 'madeup@example.com',
	    From => ($j->{email} || 'madeup@example.com'),
	    Subject => $subject,
	    'Message-ID' => $message_id,
	    Date => $date,
	  ],
	  parts => [
	    Email::MIME->create(
	      attributes => { content_type => 'text/html', @attr },
	      body_str => $html_body,
	    ),
	    Email::MIME->create(
	      attributes => { content_type => 'text/plain', @attr },
	      body_str => $text_body,
	    ),
	  ],
	);
	$e->as_string;
      },
      2000, # message size either padded or truncated to this
    );
  },

  'receivedfrom' => 'fredo.co.uk',
  'passsecret' => 1,
  'greeting' => 'mpopd V3.0',
  'forwardto' => {
    'stalbans' => 1
  },

  # 2 for debug logging of all commands.
  'user_log' => {
    'user' => 2
  },

  'message_start' => '^From ',
  'message_end' => '^\\s*$',
  'mailgroup' => 12,
  'retry_on_lock' => 0,
  'mail_spool_dir' => '/var/spool/mail',
  'mpopd_conf_version' => '3.05',
  'debug' => 1,

  'hosts_allow_deny' => '/usr/local/mpopd/mpopd_allow_deny',
  'timezone' => 'GMT',
  'timeout' => 10,
  'use_maildir' => 0,

  # The directory where all user-logs are stored
  'user_log_dir' => 'out/userlog',
  # Central log file
  'debug_log' => 'out/mpopd.log',

  'reject_bogus_user' => 0,
  'allow_non_fqdn' => 1,
  'user_debug' => {
    #markjt => 1,
  },

  # must be compatible with Mail::POP3::Security::Connection
  'connection_class' => 'Mail::POP3::Security::Connection',

  # must have ">" on front!
  fork_alert => ">/usr/local/mpopd/fork_alert",
}
